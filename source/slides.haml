---
title: Slides
layout: presentation
---
%section
  %h1 Generate Parsers! Prevent Exploits!
%section
  %h1 Or
%section
  %h1 LangSec for Ruby Devs
%section
  %h1 Or
%section
  %h1 Hey! Theory of Computation is relevant to Web Development
%section
  %h1 (maybe)

%section
  %h2 Having an app exploited sucks
%section
  %h2 Attackers find
  %p.fragment Chink in armor
  %p.fragment hole in the wall
  %p.fragment crack in the dam
  %p.fragment analogy in analogy
  %p.fragment Achilles Heel
%section
  %h1 Attackers get
  %p.fragment jewels
  %p.fragment DB, eval
  %p.fragment shell
  %p.fragment ROOT!!
  %p.fragment the whole kit n' caboodle
%section
  %h1 Hope your passwords are hashed and salted. Right?
%section
  %h1 Exploits ~~ Tricks
  %p.fragment Buffer Overflow
  %p.fragment SQL Injection
  %p.fragment XSS
  %p.fragment …
  %p.fragment ∞
%section
  %h1 Unrelated
%section
  %h1 Hard to predict
%section
  %h1
    No
    %span.fragment !
    %span.fragment !
    %span.fragment !
%section
  %h1 Exploits are all the same!
%section
  %h1 Unexpected Computation!
%section
  %h1 Computation!
%section
  %h1 Theory of Computation: cliff notes
%section
  %h1 *NOT YET*
%section
  %h1 Exploit == Machine
%section
  %h1 How does an exploit work?
%section
  %h2.fragment Takes Input
  %h2.fragment Does Stuff
  %h2.fragment ...
  %h2
    %span.fragment Output
    %span.fragment / profit
%section
  %h2 (profit is important w/ exploits)
%section
  %h2 What's different?
%section
  %h1 Input Through Host Application's Inputs.
%section
  %h1 Exploits are living in your app, framework ...

%section
  :graphviz
    digraph G {
      size = "7.5,10";

      compound=true;
      rankdir="LR";
      node [shape=box fontsize=10 fontname="Verdana" style="filled"];

      subgraph cluster0 {
       // height = 100;
        //scale = 2;
        label = "Your App";
        style="filled";
        //padding [style="invis"];
        "Exploit";
      }
      { node [shape=circle]; IN OUT  };
      "Exploit" -> IN [dir=back];
      "Exploit" -> OUT;
      
    }
%section
  :markdown
    # Image
    ![gnip](/images/GnipLogo.png)
%section
  %div{style:"width:100%;height:100%"}
  :markdown
    * Markdown example
%section
  %h2 Code Sample
  - code "ruby" do
    :plain
      puts "hello"